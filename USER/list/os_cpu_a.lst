


ARM Macro Assembler    Page 1 


    1 00000000         ;=======================================================
                       =====================
    2 00000000         ; Modified from the original to interoperate with CMIS a
                       s follows:
    3 00000000         ; - renamed OS_CPU_PendSVHandler to CMSIS-compatible nam
                       e PendSV_Handler
    4 00000000         ;
    5 00000000         ; Quantum Leaps, LLC. www.state-machine.com
    6 00000000         ; 2015-03-23
    7 00000000         ;=======================================================
                       ====================*/
    8 00000000         ;
    9 00000000         ;*******************************************************
                       *************************************************
   10 00000000         ;                                               uC/OS-II
                       
   11 00000000         ;                                         The Real-Time 
                       Kernel
   12 00000000         ;
   13 00000000         ;                               (c) Copyright 1992-2006,
                        Micrium, Weston, FL
   14 00000000         ;                                          All Rights Re
                       served
   15 00000000         ;
   16 00000000         ;                                           ARM Cortex-M
                       3 Port
   17 00000000         ;
   18 00000000         ; File      : OS_CPU_A.ASM
   19 00000000         ; Version   : V2.89
   20 00000000         ; By        : Jean J. Labrosse
   21 00000000         ;             Brian Nagel
   22 00000000         ;
   23 00000000         ; For       : ARMv7M Cortex-M3
   24 00000000         ; Mode      : Thumb2
   25 00000000         ; Toolchain : RealView Development Suite
   26 00000000         ;             RealView Microcontroller Development Kit (
                       MDK)
   27 00000000         ;             ARM Developer Suite (ADS)
   28 00000000         ;             Keil uVision
   29 00000000         ;*******************************************************
                       *************************************************
   30 00000000         
   31 00000000         ;*******************************************************
                       *************************************************
   32 00000000         ;                                           PUBLIC FUNCT
                       IONS
   33 00000000         ;*******************************************************
                       *************************************************
   34 00000000         
   35 00000000                 EXTERN           OSRunning   ; External referenc
                                                            es
   36 00000000                 EXTERN           OSPrioCur
   37 00000000                 EXTERN           OSPrioHighRdy
   38 00000000                 EXTERN           OSTCBCur
   39 00000000                 EXTERN           OSTCBHighRdy
   40 00000000                 EXTERN           OSIntExit
   41 00000000                 EXTERN           OSTaskSwHook
   42 00000000                 EXTERN           OS_CPU_ExceptStkBase
   43 00000000         



ARM Macro Assembler    Page 2 


   44 00000000                 EXPORT           ItDisAll
   45 00000000                 EXPORT           OS_CPU_SR_Save ; Functions decl
                                                            ared in this file
   46 00000000                 EXPORT           OS_CPU_SR_Restore
   47 00000000                 EXPORT           OSStartHighRdy
   48 00000000                 EXPORT           OSCtxSw
   49 00000000                 EXPORT           OSIntCtxSw
   50 00000000                 EXPORT           PendSV_Handler ; QL was: OS_CPU
                                                            _PendSVHandler
   51 00000000         
   52 00000000                 IF               {FPU} != "SoftVFP"
   55                          ENDIF
   56 00000000         
   57 00000000         
   58 00000000         ;*******************************************************
                       *************************************************
   59 00000000         ;                                                EQUATES
                       
   60 00000000         ;*******************************************************
                       *************************************************
   61 00000000         
   62 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   63 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; System priority r
                                                            egister (priority 1
                                                            4).
   64 00000000 000000FF 
                       NVIC_PENDSV_PRI
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   65 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   66 00000000         
   67 00000000         ;*******************************************************
                       *************************************************
   68 00000000         ;                                      CODE GENERATION D
                       IRECTIVES
   69 00000000         ;*******************************************************
                       *************************************************
   70 00000000         
   71 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   72 00000000                 THUMB
   73 00000000                 REQUIRE8
   74 00000000                 PRESERVE8
   75 00000000         
   76 00000000         ;*******************************************************
                       *************************************************
   77 00000000         ;                                   CRITICAL SECTION MET
                       HOD 3 FUNCTIONS
   78 00000000         ;
   79 00000000         ; Description: Disable/Enable interrupts by preserving t
                       he state of interrupts.  Generally speaking you



ARM Macro Assembler    Page 3 


   80 00000000         ;              would store the state of the interrupt di
                       sable flag in the local variable 'cpu_sr' and then
   81 00000000         ;              disable interrupts.  'cpu_sr' is allocate
                       d in all of uC/OS-II's functions that need to
   82 00000000         ;              disable interrupts.  You would restore th
                       e interrupt disable state by copying back 'cpu_sr'
   83 00000000         ;              into the CPU's status register.
   84 00000000         ;
   85 00000000         ; Prototypes :     OS_CPU_SR  OS_CPU_SR_Save(void);
   86 00000000         ;                  void       OS_CPU_SR_Restore(OS_CPU_S
                       R cpu_sr);
   87 00000000         ;
   88 00000000         ;
   89 00000000         ; Note(s)    : 1) These functions are used in general li
                       ke this:
   90 00000000         ;
   91 00000000         ;                 void Task (void *p_arg)
   92 00000000         ;                 {
   93 00000000         ;                 #if OS_CRITICAL_METHOD == 3          /
                       * Allocate storage for CPU status register */
   94 00000000         ;                     OS_CPU_SR  cpu_sr;
   95 00000000         ;                 #endif
   96 00000000         ;
   97 00000000         ;                          :
   98 00000000         ;                          :
   99 00000000         ;                     OS_ENTER_CRITICAL();             /
                       * cpu_sr = OS_CPU_SaveSR();                */
  100 00000000         ;                          :
  101 00000000         ;                          :
  102 00000000         ;                     OS_EXIT_CRITICAL();              /
                       * OS_CPU_RestoreSR(cpu_sr);                */
  103 00000000         ;                          :
  104 00000000         ;                          :
  105 00000000         ;                 }
  106 00000000         ;*******************************************************
                       *************************************************
  107 00000000         
  108 00000000         OS_CPU_SR_Save
  109 00000000 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
  110 00000004 B672            CPSID            I
  111 00000006 4770            BX               LR
  112 00000008         
  113 00000008         OS_CPU_SR_Restore
  114 00000008 F380 8810       MSR              PRIMASK, R0
  115 0000000C 4770            BX               LR
  116 0000000E         
  117 0000000E         ;*******************************************************
                       *************************************************
  118 0000000E         ;                                          START MULTITA
                       SKING
  119 0000000E         ;                                       void OSStartHigh
                       Rdy(void)
  120 0000000E         ;
  121 0000000E         ; Note(s) : 1) This function triggers a PendSV exception
                        (essentially, causes a context switch) to cause
  122 0000000E         ;              the first task to start.
  123 0000000E         ;



ARM Macro Assembler    Page 4 


  124 0000000E         ;           2) OSStartHighRdy() MUST:
  125 0000000E         ;              a) Setup PendSV exception priority to low
                       est;
  126 0000000E         ;              b) Set initial PSP to 0, to tell context 
                       switcher this is first run;
  127 0000000E         ;              c) Set the main stack to OS_CPU_ExceptStk
                       Base;
  128 0000000E         ;              d) Set OSRunning to TRUE;
  129 0000000E         ;              e) Trigger PendSV exception;
  130 0000000E         ;              f) Enable interrupts (tasks will run with
                        interrupts enabled).
  131 0000000E         ;*******************************************************
                       *************************************************
  132 0000000E         
  133 0000000E         OSStartHighRdy
  134 0000000E 4820            LDR              R0, =NVIC_SYSPRI14 ; Set the Pe
                                                            ndSV exception prio
                                                            rity
  135 00000010 F04F 01FF       LDR              R1, =NVIC_PENDSV_PRI
  136 00000014 7001            STRB             R1, [R0]
  137 00000016         
  138 00000016 2000            MOVS             R0, #0      ; Set the PSP to 0 
                                                            for initial context
                                                             switch call
  139 00000018 F380 8809       MSR              PSP, R0
  140 0000001C         
  141 0000001C 481D            LDR              R0, =OS_CPU_ExceptStkBase ; Ini
                                                            tialize the MSP to 
                                                            the OS_CPU_ExceptSt
                                                            kBase
  142 0000001E 6801            LDR              R1, [R0]
  143 00000020 F381 8808       MSR              MSP, R1
  144 00000024         
  145 00000024 481C            LDR              R0, =OSRunning 
                                                            ; OSRunning = TRUE
  146 00000026 2101            MOVS             R1, #1
  147 00000028 7001            STRB             R1, [R0]
  148 0000002A         
  149 0000002A 481C            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  150 0000002C F04F 5180       LDR              R1, =NVIC_PENDSVSET
  151 00000030 6001            STR              R1, [R0]
  152 00000032         
  153 00000032 B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
  154 00000034         
  155 00000034         OSStartHang
  156 00000034 E7FE            B                OSStartHang ; Should never get 
                                                            here
  157 00000036         
  158 00000036         
  159 00000036         ;*******************************************************
                       *************************************************
  160 00000036         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
  161 00000036         ;                                           void OSCtxSw



ARM Macro Assembler    Page 5 


                       (void)
  162 00000036         ;
  163 00000036         ; Note(s) : 1) OSCtxSw() is called when OS wants to perf
                       orm a task context switch.  This function
  164 00000036         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
  165 00000036         ;*******************************************************
                       *************************************************
  166 00000036         
  167 00000036         OSCtxSw
  168 00000036 4819            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  169 00000038 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  170 0000003C 6001            STR              R1, [R0]
  171 0000003E 4770            BX               LR
  172 00000040         
  173 00000040         ;*******************************************************
                       *************************************************
  174 00000040         ;                             PERFORM A CONTEXT SWITCH (
                       From interrupt level)
  175 00000040         ;                                         void OSIntCtxS
                       w(void)
  176 00000040         ;
  177 00000040         ; Notes:    1) OSIntCtxSw() is called by OSIntExit() whe
                       n it determines a context switch is needed as
  178 00000040         ;              the result of an interrupt.  This functio
                       n simply triggers a PendSV exception which will
  179 00000040         ;              be handled when there are no more interru
                       pts active and interrupts are enabled.
  180 00000040         ;*******************************************************
                       *************************************************
  181 00000040         
  182 00000040         OSIntCtxSw
  183 00000040 4816            LDR              R0, =NVIC_INT_CTRL ; Trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
  184 00000042 F04F 5180       LDR              R1, =NVIC_PENDSVSET
  185 00000046 6001            STR              R1, [R0]
  186 00000048 4770            BX               LR
  187 0000004A         
  188 0000004A         ;*******************************************************
                       *************************************************
  189 0000004A         ;                                         HANDLE PendSV 
                       EXCEPTION
  190 0000004A         ;                                     void OS_CPU_PendSV
                       Handler(void)
  191 0000004A         ;
  192 0000004A         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
  193 0000004A         ;              context switches with Cortex-M3.  This is
                        because the Cortex-M3 auto-saves half of the
  194 0000004A         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
  195 0000004A         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
  196 0000004A         ;              this way means that context saving and re



ARM Macro Assembler    Page 6 


                       storing is identical whether it is initiated from
  197 0000004A         ;              a thread or occurs due to an interrupt or
                        exception.
  198 0000004A         ;
  199 0000004A         ;           2) Pseudo-code is:
  200 0000004A         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  201 0000004A         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  202 0000004A         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  203 0000004A         ;              d) Call OSTaskSwHook();
  204 0000004A         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  205 0000004A         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  206 0000004A         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  207 0000004A         ;              h) Restore R4-R11 from new process stack;
                       
  208 0000004A         ;              i) Perform exception return which will re
                       store remaining context.
  209 0000004A         ;
  210 0000004A         ;           3) On entry into PendSV handler:
  211 0000004A         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  212 0000004A         ;                 xPSR, PC, LR, R12, R0-R3
  213 0000004A         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  214 0000004A         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  215 0000004A         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  216 0000004A         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  217 0000004A         ;
  218 0000004A         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  219 0000004A         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  220 0000004A         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  221 0000004A         ;*******************************************************
                       *************************************************
  222 0000004A         
  223 0000004A         
  224 0000004A         PendSV_Handler                       ; QL was: OS_CPU_Pe
                                                            ndSVHandler
  225 0000004A B672            CPSID            I           ; Prevent interrupt
                                                            ion during context 
                                                            switch
  226 0000004C F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  227 00000050 B128            CBZ              R0, OS_CPU_PendSVHandler_nosave
 
                                                            ; Skip register sav
                                                            e the first time
  228 00000052         
  229 00000052 3820            SUBS             R0, R0, #0x20 ; Save remaining 



ARM Macro Assembler    Page 7 


                                                            regs r4-11 on proce
                                                            ss stack
  230 00000054 E880 0FF0       STM              R0, {R4-R11}
  231 00000058         
  232 00000058 4911            LDR              R1, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  233 0000005A 6809            LDR              R1, [R1]
  234 0000005C 6008            STR              R0, [R1]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  235 0000005E         
  236 0000005E         ; At this point, entire context of process has been save
                       d
  237 0000005E         OS_CPU_PendSVHandler_nosave
  238 0000005E B500            PUSH             {R14}       ; Save LR exc_retur
                                                            n value
  239 00000060 4810            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  240 00000062 4780            BLX              R0
  241 00000064 F85D EB04       POP              {R14}
  242 00000068         
  243 00000068 480F            LDR              R0, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy;
  244 0000006A 4910            LDR              R1, =OSPrioHighRdy
  245 0000006C 780A            LDRB             R2, [R1]
  246 0000006E 7002            STRB             R2, [R0]
  247 00000070         
  248 00000070 480B            LDR              R0, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  249 00000072 490F            LDR              R1, =OSTCBHighRdy
  250 00000074 680A            LDR              R2, [R1]
  251 00000076 6002            STR              R2, [R0]
  252 00000078         
  253 00000078 6810            LDR              R0, [R2]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  254 0000007A E890 0FF0       LDM              R0, {R4-R11} ; Restore r4-11 fr
                                                            om new process stac
                                                            k
  255 0000007E 3020            ADDS             R0, R0, #0x20
  256 00000080 F380 8809       MSR              PSP, R0     ; Load PSP with new
                                                             process SP
  257 00000084 F04E 0E04       ORR              LR, LR, #0x04 ; Ensure exceptio
                                                            n return uses proce
                                                            ss stack
  258 00000088 B662            CPSIE            I
  259 0000008A 4770            BX               LR          ; Exception return 
                                                            will restore remain
                                                            ing context
  260 0000008C         
  261 0000008C         ;/******************************************************
                       ********************************
  262 0000008C         ;* Function Name: ItDisAll
  263 0000008C         ;*
  264 0000008C         ;* Function Description: Turn off all interrupts of the 
                       interrupt controller.
  265 0000008C         ;*
  266 0000008C         ;* Parameters: None
  267 0000008C         ;*



ARM Macro Assembler    Page 8 


  268 0000008C         ;* Return Value: None
  269 0000008C         ;*******************************************************
                       ********************************/
  270 0000008C         
  271 0000008C         ItDisAll
  272 0000008C B672            CPSID            I
  273 0000008E 4770            BX               LR
  274 00000090         
  275 00000090         
  276 00000090                 ALIGN
  277 00000090         
  278 00000090                 END
              E000ED22 
              00000000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\obj\os_cpu_a.d -o.\obj\os_cpu_a.o -I.\RTE\_Target_1 -IC:\Users\n
goqu\AppData\Local\Arm\Packs\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Users\ngoq
u\AppData\Local\Arm\Packs\Keil\STM32F1xx_DFP\2.3.0\Device\Include --predefine="
__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 527" --predefine="_RTE_ 
SETA 1" --predefine="STM32F10X_MD SETA 1" --list=.\list\os_cpu_a.lst ..\UCOSII\
PORT\os_cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 71 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      None
Comment: .text unused
ItDisAll 0000008C

Symbol: ItDisAll
   Definitions
      At line 271 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 44 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: ItDisAll used once
OSCtxSw 00000036

Symbol: OSCtxSw
   Definitions
      At line 167 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 48 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSCtxSw used once
OSIntCtxSw 00000040

Symbol: OSIntCtxSw
   Definitions
      At line 182 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 49 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSIntCtxSw used once
OSStartHang 00000034

Symbol: OSStartHang
   Definitions
      At line 155 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 156 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSStartHang used once
OSStartHighRdy 0000000E

Symbol: OSStartHighRdy
   Definitions
      At line 133 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 47 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSStartHighRdy used once
OS_CPU_PendSVHandler_nosave 0000005E

Symbol: OS_CPU_PendSVHandler_nosave
   Definitions
      At line 237 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 227 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OS_CPU_PendSVHandler_nosave used once
OS_CPU_SR_Restore 00000008

Symbol: OS_CPU_SR_Restore



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 113 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 46 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OS_CPU_SR_Restore used once
OS_CPU_SR_Save 00000000

Symbol: OS_CPU_SR_Save
   Definitions
      At line 108 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 45 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OS_CPU_SR_Save used once
PendSV_Handler 0000004A

Symbol: PendSV_Handler
   Definitions
      At line 224 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 50 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: PendSV_Handler used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 62 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 149 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 168 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 183 in file ..\UCOSII\PORT\os_cpu_a.asm

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 65 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 150 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 169 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 184 in file ..\UCOSII\PORT\os_cpu_a.asm

NVIC_PENDSV_PRI 000000FF

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 64 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 135 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 63 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 134 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: NVIC_SYSPRI14 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 40 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      None
Comment: OSIntExit unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 36 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 243 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 37 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 244 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 35 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 145 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 38 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 232 in file ..\UCOSII\PORT\os_cpu_a.asm
      At line 248 in file ..\UCOSII\PORT\os_cpu_a.asm

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 39 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 249 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 41 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 239 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OSTaskSwHook used once
OS_CPU_ExceptStkBase 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Symbol: OS_CPU_ExceptStkBase
   Definitions
      At line 42 in file ..\UCOSII\PORT\os_cpu_a.asm
   Uses
      At line 141 in file ..\UCOSII\PORT\os_cpu_a.asm
Comment: OS_CPU_ExceptStkBase used once
8 symbols
358 symbols in table
